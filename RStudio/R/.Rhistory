# Generat a list of random numbers:
#runif -> 30
random_numbers <- runif(30)
# Plot the random numbers
plot(random_numbers, type = "o", pch = 16, col = "blue",
xlab = "Index", ylab = "Random Numbers",
main = "Plot of 30 Random Numbers")
set.seed(123)  # Set seed for reproducibility
random_numbers <- rnorm(30)
# Plot the random numbers
plot(random_numbers, type = "b", pch = 19, col = "red",
xlab = "Index", ylab = "Value", main = "Random Numbers")
# ploting a histogram graph using random data
#Load the ggplot2 library:
library(ggplot2)
#Set a seed for reproducibility:
set.seed(123)
#Generate random data:
data <- data.frame(x = rnorm(1000, mean = 50, sd = 10))
#Create histogram plot:
ggplot(data, aes(x)) +
geom_histogram(fill = "steelblue", color = "white", bins = 30) +
labs(x = "Value",
y = "Frequency",
title = "Random Data Histogram") +
coord_cartesian(xlim = c(10, 80))
# Coloring The graph by the variable
set.seed(123)
# Generate random data:
n <- 1000
data <- data.frame(
category = factor(sample(LETTERS[1:5], n, replace = TRUE)),
value = rnorm(n)
)
# Create the histogram:
ggplot(data, aes(x = value, fill = category)) +
geom_histogram(binwidth = 0.5, color = "black", alpha = 0.7) +
labs(x = "Value", y = "Frequency", fill = "Category") +
scale_fill_discrete(name = "Category") +
theme_minimal()
# Histogram for two normal distributions
set.seed(123)
# Generate random data from two normal distributions:
data <- data.frame(
x = c(rnorm(1000, mean = 50, sd = 10),
rnorm(1000, mean = 70, sd = 15)),
group = rep(c("Group 1", "Group 2"), each = 1000)
)
# Create grouped histogram:
ggplot(data, aes(x, fill = group)) +
geom_histogram(color = "white", bins = 30, alpha = 0.7, position = "identity") +
labs(x = "Value", y = "Frequency", title = "Grouped Histogram") +
scale_fill_manual(values = c("steelblue", "darkorange")) +
theme_minimal()
# density histogram with kernel density estimate overlay
set.seed(123)
# Generate random data from a uniform distribution:
data <- data.frame(x = runif(1000, min = 0, max = 1))
# Create density histogram with kernel density estimate overlay:
ggplot(data, aes(x)) +
geom_histogram(aes(y = ..density..), fill = "steelblue", color = "white", bins = 30) +
geom_density(alpha = 0.3, color = "darkorange") +
labs(x = "Value", y = "Density", title = "Density Histogram with Kernel Density Estimate") +
theme_minimal()
# using mtcars data set to use boxplot
# Load the Libraries:
library(ggplot2)
library(viridis) # improve graph readability for readers
library(hrbrthemes) # provides typography-centric theme
# Load the mtcars data set:
data(mtcars)
# Create a boxplot with individual data points:
ggplot(mtcars, aes(x = factor(cyl), y = mpg)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(width = 0.2, height = 0, color = "blue", alpha = 0.5) +
theme_ipsum() +
labs(x = "Cylinders", y = "Miles per Gallon") +
ggtitle("A boxplot with jitter")
# Load the mtcars Data set:
# Since the mtcars data set is a built-in data set in R, we can load it by using the following command:
data("mtcars")
# view first six rows of mtcars data set (By default is 6):
head(mtcars)
# view first six rows of mtcars data set (By default is 6):
head(mtcars)
# summarize mtcars data set:
summary(mtcars)
# view first six rows of mtcars data set (By default is 6):
head(mtcars)
# summarize mtcars data set ( summarize each variable in the data set):
summary(mtcars)
#display rows and columns:
dim(mtcars)
#display rows and columns:
dim(mtcars) # get the number of rows and number of columns
# display column names:
names(mtcars)
# display column names:
names(mtcars)
# Check the structure of mtcars data
str(mtcars)
# Check the structure of mtcars data
str(mtcars)
# Check for missing data:
colSums(is.na(mtcars))
# Check for missing data:
colSums(is.na(mtcars))
# summarize mtcars data set ( summarize each variable in the data set):
summary(mtcars)
# display rows and columns:
dim(mtcars) # get the number of rows and number of columns
# display column names:
names(mtcars)
# Check the structure of mtcars data:
str(mtcars)
# Check for missing data:
colSums(is.na(mtcars))
# Converting the variables with discrete values to factor variables:
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$am <- as.factor(mtcars$am)
mtcars$gear <- as.factor(mtcars$gear)
mtcars$carb <- as.factor(mtcars$carb)
# Explore the statistics of our response variable mpg (miles per gallon):
summary(mtcars$mpg)
# Explore the statistics of our response variable mpg (miles per gallon):
summary(mtcars$mpg)
library(ggplot2)
# Since the mtcars data set is a built-in data set in R, we can load it by using the following command:
data("mtcars")
# view first six rows of mtcars data set (By default is 6):
head(mtcars)
# summarize mtcars data set ( summarize each variable in the data set):
summary(mtcars)
# display rows and columns:
dim(mtcars) # get the number of rows and number of columns
# display column names:
names(mtcars)
# Check the structure of mtcars data:
str(mtcars)
# Check for missing data:
colSums(is.na(mtcars))
# Converting the variables with discrete values to factor variables:
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$am <- as.factor(mtcars$am)
mtcars$gear <- as.factor(mtcars$gear)
mtcars$carb <- as.factor(mtcars$carb)
# Explore the statistics of our response variable mpg (miles per gallon):
summary(mtcars$mpg)
g <- ggplot(data = mtcars, aes(x=am, y=mpg), draw_quantiles=TRUE)
g+theme_bw() + geom_violin(fill = "darkkhaki") + labs(title="Violin Plot",  x="Transmission (0 = automatic, 1 = manual)",y="Miles Per Gallon")
g <- ggplot(data = mtcars, aes(x=am, y=mpg), draw_quantiles=TRUE)
g+theme_bw() + geom_violin(fill = "darkkhaki") + labs(title="Violin Plot",  x="Transmission (0 = automatic, 1 = manual)",y="Miles Per Gallon")
g <- ggplot(data = mtcars, aes(x=am, y=mpg), draw_quantiles=TRUE)
g+theme_bw() + geom_violin(fill = "darkkhaki") + labs(title="Violin Plot",  x="Transmission (0 = automatic, 1 = manual)",y="Miles Per Gallon")
g <- ggplot(data = mtcars, aes(x=am, y=mpg), draw_quantiles=TRUE)
g+theme_bw() + geom_violin(fill = "darkkhaki") + labs(title="Violin Plot",  x="Transmission (0 = automatic, 1 = manual)",y="Miles Per Gallon")
print(g)
g <- ggplot(data = mtcars, aes(x=am, y=mpg), draw_quantiles=TRUE)
g+theme_bw() + geom_violin(fill = "darkkhaki") + labs(title="Violin Plot",  x="Transmission (0 = automatic, 1 = manual)",y="Miles Per Gallon")
g <- ggplot(data = mtcars, aes(x=am, y=mpg), draw_quantiles=TRUE)
g+theme_bw() + geom_violin(fill = "darkkhaki") + labs(title="Violin Plot",  x="Transmission (0 = automatic, 1 = manual)",y="Miles Per Gallon")
print(g)
g <- ggplot(data = mtcars, aes(x=am, y=mpg), draw_quantiles=TRUE)
g+theme_bw() + geom_violin(fill = "darkkhaki") + labs(title="Violin Plot",  x="Transmission (0 = automatic, 1 = manual)",y="Miles Per Gallon")
g <- ggplot(data = mtcars, aes(x=am, y=mpg), draw_quantiles=TRUE)
g+theme_bw() + geom_violin(fill = "darkkhaki") + labs(title="Violin Plot",  x="Transmission (0 = automatic, 1 = manual)",y="Miles Per Gallon")
g <- ggplot(data = mtcars, aes(x=am, y=mpg), draw_quantiles=TRUE)
g+theme_bw() + geom_violin(fill = "darkkhaki") + labs(title="Violin Plot",  x="Transmission (0 = automatic, 1 = manual)",y="Miles Per Gallon")
# check the relationship between horsepower (hP) and (mpg) differentiating between
# the type of engine.
ggplot(mtcars, aes(x = hp, y = mpg, color = vs)) + geom_point() + geom_smooth()
# check the relationship between horsepower (hP) and (mpg) differentiating between
# the type of engine.
ggplot(mtcars, aes(x = hp, y = mpg, color = vs)) + geom_point() + geom_smooth()
# check the pairwise correlation between our desired variables:
ggpairs(data = mtcars %>% select(mpg,hp,disp,vs,am))
install.packages("GGally")
library(ggplot2)
library(GGally)
library(ggplot2)
library(GGally)
# check the pairwise correlation between our desired variables:
ggpairs(data = mtcars %>% select(mpg,hp,disp,vs,am))
library(ggplot2)
library(GGally)
library(sqldf)
library(ggplot2)
library(GGally)
library(sqldf)
# check the pairwise correlation between our desired variables:
ggpairs(data = mtcars %>% select(mpg,hp,disp,vs,am))
library(ggplot2)
library(GGally)
library(dplyr)
library(ggplot2)
library(GGally)
library(dplyr)
# check the pairwise correlation between our desired variables:
ggpairs(data = mtcars %>% select(mpg,hp,disp,vs,am))
# check the pairwise correlation between our desired variables:
ggpairs(data = mtcars %>% select(mpg,hp,disp,vs,am))
# summarize mtcars data set ( summarize each variable in the data set):
summary(mtcars)
# display rows and columns:
dim(mtcars) # get the number of rows and number of columns
# display column names:
names(mtcars)
# Check the structure of mtcars data:
str(mtcars)
# Check for missing data:
colSums(is.na(mtcars))
# Explore the statistics of our response variable mpg (miles per gallon):
summary(mtcars$mpg)
g <- ggplot(data = mtcars, aes(x=am, y=mpg), draw_quantiles=TRUE)
g+theme_bw() + geom_violin(fill = "darkkhaki") + labs(title="Violin Plot",  x="Transmission (0 = automatic, 1 = manual)",y="Miles Per Gallon")
# check the relationship between horsepower (hP) and (mpg) differentiating between
# the type of engine:
ggplot(mtcars, aes(x = hp, y = mpg, color = vs)) + geom_point() + geom_smooth()
# check the pairwise correlation between our desired variables:
ggpairs(data = mtcars %>% select(mpg,hp,disp,vs,am))
library(ggplot2)
library(GGally)
library(dplyr)
library(ggplot2)
library(GGally)
library(dplyr)
# Since the mtcars data set is a built-in data set in R, we can load it by using the following command:
data("mtcars")
# view first six rows of mtcars data set (By default is 6):
head(mtcars)
# summarize mtcars data set ( summarize each variable in the data set):
summary(mtcars)
# display rows and columns:
dim(mtcars) # get the number of rows and number of columns
# display rows and columns:
dim(mtcars) # get the number of rows and number of columns
# display column names:
names(mtcars)
# Check the structure of mtcars data:
str(mtcars)
# Check for missing data:
colSums(is.na(mtcars))
# Converting the variables with discrete values to factor variables:
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$am <- as.factor(mtcars$am)
mtcars$gear <- as.factor(mtcars$gear)
mtcars$carb <- as.factor(mtcars$carb)
# Explore the statistics of our response variable mpg (miles per gallon):
summary(mtcars$mpg)
g <- ggplot(data = mtcars, aes(x=am, y=mpg), draw_quantiles=TRUE)
g+theme_bw() + geom_violin(fill = "darkkhaki") + labs(title="Violin Plot",  x="Transmission (0 = automatic, 1 = manual)",y="Miles Per Gallon")
# check the relationship between horsepower (hP) and (mpg) differentiating between
# the type of engine:
ggplot(mtcars, aes(x = hp, y = mpg, color = vs)) + geom_point() + geom_smooth()
# check the pairwise correlation between our desired variables:
ggpairs(data = mtcars %>% select(mpg,hp,disp,vs,am))
# T-Test transmission type and MPG :
test_result <- t.test(mpg ~ am, data=mtcars)
test_result$p.value
testResults$estimate
test_result$estimate
test_result$estimate
model <- lm(mpg ~ ., data = mtcars)
summary(model)
model <- lm(mpg ~ ., data = mtcars)
summary(model)
# Backward Elimination method:
red_model <- step(model, direction = "backward", trace = FALSE)
summary(red_model)
# Backward Elimination method:
red_model <- step(model, direction = "backward", trace = FALSE)
summary(red_model)
